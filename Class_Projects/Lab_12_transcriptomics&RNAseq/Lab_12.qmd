---
title: "Lab_12"
author: "Runqi Zhang"
format: pdf
---

# 1. Bioconductor and DESeq2 setup

```{r}
library(BiocManager)
library(DESeq2)
```

# 2. Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(metadata)
dim(counts)
sum(metadata$dex=="control")
```

## Q1. How many genes are in this dataset?

A: 38694

## Q2. How many 'control' cell lines do we have?

A: 4

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
n_control <- sum(metadata$dex=="control")
control.mean <- rowSums(control.counts)/n_control
head(control.mean)
```

## Q3. How would you make the above code in either approach more robust?

A: substitute 4 with "n_control \<- sum(metadata\$dex=="control")", so the function would still give the correct values when more samples are added.

## Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

A: See codes below

```{r}
treated <- metadata %>% filter(dex=="treated")
treated.counts <- counts %>% select(treated$id) 
n_treated <- sum(metadata$dex=="treated")
treated.mean <- rowSums(treated.counts)/n_treated
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

## Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

A: see codes below

```{r}
library(ggplot2)
plot_1 <- ggplot(meancounts)+
            aes(control.mean, treated.mean)+
            geom_point(alpha=0.3)+
            labs(x="Control",
                 y="Treated")
plot_1
```

## Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?

A: geom_point(alpha=0.3)

## Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

A: scale_x\_log10() or scale_x\_continuous(trans="log2").

```{r}
plot_1+ 
  scale_x_continuous(trans="log2")+
  scale_y_continuous(trans="log2")+
  labs(x="log(Control)",
       y="log(Treated)")
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

The NaN is returned when you divide by zero and try to take the log. The -Inf is returned when you try to take the log of zero

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
head(zero.vals)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

## Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

A: "arr.ind=TRUE" makes the which() function to return both col and row indices (it tells us which genes in which samples have zero count); We are removing all genes with zero count from our dataset, therfore we only focus on the row, where the gene data is found, but not the column. The unqiue() funciton will delete any duplicate values or rows.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)

sum(up.ind)
sum(down.ind)
```

## Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

A: 250

## Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

A: 367

## Q10. Do you trust these results? Why or why not?

A: No, these resulst are not trust-worthy because the fold-change can be large without being biologically significant.

# 4. DESeq2 analysis

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

# 5. Adding annotation data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

## Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res\$genename.

A: see codes below

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

# 6. Data Visualization

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

Enhanced Volcano Plot
```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

# 7. Pathway analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```

![](hsa05310.pathview.png)

## Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

A: see codes below

This is for the most significantly down-regulated pathway

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05332")
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05332", kegg.native=FALSE)
```

![](hsa05332.pathview.png)

This is for the second most significant down-regulated pathway

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04940")
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04940", kegg.native=FALSE)
```

![](hsa04940.pathview.png)

# OPTIONAL: Plotting counts for genes of interest

```{r}
i <- grep("CRISPLD2", res$symbol)
res[i,]
```

```{r}
rownames(res[i,])
```

```{r}
plotCounts(dds, gene="ENSG00000103196", intgroup="dex")

```

```{r}
# Return the data
d <- plotCounts(dds, gene="ENSG00000103196", intgroup="dex", returnData=TRUE)
head(d)
```

```{r}
boxplot(count ~ dex , data=d)
```

```{r}
library(ggplot2)
ggplot(d, aes(dex, count, fill=dex)) + 
  geom_boxplot() + 
  scale_y_log10() + 
  ggtitle("CRISPLD2")
```

# Session Info

```{r}
sessionInfo()
```
